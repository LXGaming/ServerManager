buildscript {
    repositories {
        jcenter()
        maven {
            name = "lxgaming"
            url = "https://dl.bintray.com/lxgaming/maven"
        }
        maven {
            name = "minecraftforge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/maven"
        }
    }

    dependencies {
        classpath("com.github.jengelman.gradle.plugins:shadow:5.2.0")
        classpath("net.minecraftforge.gradle:ForgeGradle:2.3-20191227.215244-1")
        classpath("org.spongepowered:mixingradle:0.6-20191227.220440-1")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "servermanager-sponge"
version = version

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    mappings = "stable_39"
    makeObfSourceJar = false
}

mixin {
    defaultObfuscationEnv = searge
    disableRefMapWarning = true
    add(sourceSets.main, "mixins.servermanager.refmap.json")
}

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    compileJava.dependsOn(":common:build")
    extractAnnotationsJar.enabled = false
    jar.enabled = false
    jar.dependsOn("shadowJar")
}

repositories {
    jcenter()
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    shadow(project(path: ":common")) {
        exclude(module: "gson")
        exclude(module: "slf4j-api")
    }

    annotationProcessor("org.spongepowered:spongecommon:${spongeVersion}")
    provided("org.spongepowered:spongecommon:${spongeVersion}")
}

jar {
    manifest {
        attributes(
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true,
                "MixinConfigs": "mixins.servermanager.core.json",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        )
    }

    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }

    exclude("dummyThing")
}

reobf {
    shadowJar {}
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    relocate("org.apache.commons.pool2", "io.github.lxgaming.servermanager.lib.commonspool2")
    relocate("redis.clients.jedis", "io.github.lxgaming.servermanager.lib.jedis")
    relocate("redis.clients.util", "io.github.lxgaming.servermanager.lib.jedisutil")
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}