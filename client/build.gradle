plugins {
    id "com.github.johnrengelman.shadow"
    id "java"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "servermanager-client"

configurations {
    shadow {
        runtime.extendsFrom(shadow)
    }

    // build.dependsOn("signJar")
    compileJava.dependsOn(":servermanager-common:build")
    jar.enabled = false
    jar.dependsOn("shadowJar")
}

repositories {
}

dependencies {
    shadow(project(path: ":servermanager-common"))
    runtime("org.slf4j:slf4j-simple:${slf4jVersion}")
}

jar {
    manifest {
        attributes("Main-Class": "io.github.lxgaming.servermanager.client.Main")
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    exclude("module-info.class")
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}